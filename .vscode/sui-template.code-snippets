{
  "sui-template": {
    "prefix": "sui-template",
    "scope": "javascript,extendscript,javascriptreact",
    "body": [
      "/**",
      " * @file ${TM_FILEPATH}",
      " * @author SwatchPie.io",
      " * @version 1.0",
      " * @date ${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE}",
      " * @license 'CC BY-NC 4.0'",
      " * ",
      " * @description",
      " * ${3:description}.",
      " * ",
      " * @example",
      " * 1. Open a document in CMYK mode.",
      " * 2. Use `CTRL+F12` to run this script.",
      " * ",
      " */",
      "",
      "",
      "// @include '../library/utilities/miscUtils.jsx'",
      "// @include '../library/utilities/scriptUIUtils.jsx'",
      "",
      "var DEBUG = true;",
      "",
      "(function ${1:scriptName}UI() {",
      "",
      "  var functionID = '${1:scriptName}UI';",
      "  var functionTitle = '${2:Script Title}';",
      "",
      "  try {",
      "",
      "    if (!app.activeDocument) {",
      "      throw new Error('No active document.');",
      "    }",
      "",
      "    var win = new Window('dialog', functionTitle);",
      "        win.alignChildren = 'fill';",
      "",
      "    //",
      "    // Code here",
      "    //",
      "    $0",
      "",
      "    //",
      "    // Run Button Group",
      "    //",
      "    var runGroup = win.add('group', undefined);",
      "        runGroup.orientation = 'column';",
      "        runGroup.alignment = 'fill';",
      "",
      "    // Run button and handler",
      "    var runButton = runGroup.add('button', undefined, 'Run');",
      "        runButton.alignment = 'fill'",
      "        runButton.onClick = runButtonHandler;",
      "",
      "    function runButtonHandler() {",
      "",
      "      var functionID = 'runButtonHandler';",
      "",
      "      try {",
      "        // Gather input values",
      "        var options = {",
      "          hello: 'Hello, World!',",
      "          goodbye: 'So long for now :)'",
      "        };",
      "",
      "        // Debug",
      "        var optionsString = miscUtils.objectToString(options);",
      "        if (DEBUG) alert(optionsString, functionID);",
      "",
      "        // Pass options",
      "        ${1:scriptName}(options);",
      "",
      "        // Close the dialog",
      "        win.close();",
      "",
      "      } catch (e) {",
      "        e.message = 'ERROR ' + functionID + '\\n' + e.message;",
      "        throw e;",
      "      }",
      "    };",
      "",
      "    //",
      "    // Reset Button Group",
      "    //",
      "    var resetGroup = win.add('group', undefined);",
      "        resetGroup.orientation = 'column';",
      "        resetGroup.alignment = 'fill';",
      "",
      "    // Rest button and handler",
      "    var resetButton = resetGroup.add('button', undefined, 'Reset');",
      "        resetButton.alignment = 'fill'",
      "        resetButton.onClick = resetButtonHandler;",
      "",
      "    function resetButtonHandler() {",
      "",
      "      var functionID = 'resetButtonHandler';",
      "",
      "      try {",
      "        // Run reset function",
      "        ${1:scriptName}Reset();",
      "",
      "        // Debug",
      "        var message = 'SUCCESS ' + functionID + '\\n';",
      "        if (DEBUG) alert(message, functionID);",
      "",
      "        // Close the dialog",
      "        win.close();",
      "",
      "      } catch (e) {",
      "        e.message = 'ERROR ' + functionID + '\\n' + e.message;",
      "        throw e;",
      "      }",
      "    };",
      "",
      "    //",
      "    // Show dialog + debug",
      "    //",
      "    win.show();",
      "",
      "    var message = 'SUCCESS ' + functionID + '\\n';",
      "    if (DEBUG) alert(message, functionID);",
      "",
      "  } catch (e) {",
      "    e.message = 'ERROR ' + functionID + '\\n' + e.message;",
      "    scriptUIUtils.alertBox(functionID, e.message);",
      "  }",
      "",
      "})();",
      "",
      "",
      "function ${1:scriptName}(options) {",
      "",
      "  var functionID = '${1:scriptName}';",
      "",
      "  try {",
      "",
      "    if (typeof options !== 'object') {",
      "      throw new Error('Parameter must be an object: options.');",
      "    }",
      "",
      "    // Code here",
      "",
      "    // Debug",
      "    var message = 'SUCCESS ' + functionID + '\\n';",
      "    if (DEBUG) alert(message, functionID);",
      "",
      "  } catch (e) {",
      "    e.message = 'ERROR ' + functionID + '\\n' + e.message;",
      "    throw e;",
      "  }",
      "}",
      "",
      "function ${1:scriptName}Reset() {",
      "",
      "  var functionID = '${1:scriptName}Reset';",
      "",
      "  try {",
      "",
      "    // Code here",
      "",
      "    // Debug",
      "    var message = 'SUCCESS ' + functionID + '\\n';",
      "    if (DEBUG) alert(message, functionID);",
      "",
      "  } catch (e) {",
      "    e.message = 'ERROR ' + functionID + '\\n' + e.message;",
      "    throw e;",
      "  }",
      "}",
      ""
    ],
  }
}